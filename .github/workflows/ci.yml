name: MachinaMindAIAgent CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ==================== Python Backend ====================
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install black ruff mypy
          pip install -r requirements.txt
      
      - name: Run black
        run: cd backend && black --check .
      
      - name: Run ruff
        run: cd backend && ruff check .
      
      - name: Run mypy
        run: cd backend && mypy . --ignore-missing-imports

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run tests
        run: |
          cd backend
          pytest tests/ -v --cov=. --cov-report=xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml

  # ==================== C++ Frontend ====================
  frontend-build:
    name: Frontend Build & Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.3'
          target: 'desktop'
          modules: 'qtcharts'
          cache: true
      
      - name: Configure CMake
        run: |
          cd cpp_gui
          cmake -B build -DCMAKE_BUILD_TYPE=Release
      
      - name: Build
        run: |
          cd cpp_gui
          cmake --build build --config Release
      
      - name: Run Tests
        run: |
          cd cpp_gui/build
          ctest --output-on-failure -C Release

  frontend-lint:
    name: Frontend Linting (clang-format)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install clang-format
        run: sudo apt-get install -y clang-format
      
      - name: Check formatting
        run: |
          find cpp_gui -name '*.cpp' -o -name '*.h' | xargs clang-format --dry-run --Werror

  # ==================== Security ====================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ==================== Integration ====================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: Start backend
        run: |
          cd backend
          python api/main.py &
          sleep 5
      
      - name: Run integration tests
        run: |
          cd tests/integration
          pytest -v

  # ==================== Build Artifacts ====================
  build-release:
    name: Build Release Artifacts
    if: github.ref == 'refs/heads/main'
    needs: [backend-tests, frontend-build, integration-test]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.3'
          target: 'desktop'
          modules: 'qtcharts'
          cache: true
      
      - name: Build Frontend
        run: |
          cd cpp_gui
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
      
      - name: Package Application
        run: |
          cd cpp_gui/build/Release
          windeployqt MachinaMindAIAgent.exe
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: MachinaMindAIAgent-Windows-Release
          path: cpp_gui/build/Release/
